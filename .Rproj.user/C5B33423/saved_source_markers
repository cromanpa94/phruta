{"active_set":"goodpractice","sets":[{"base_path":"","markers":[{"column":1,"line":33,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.add.R","show_error_list":true,"type":1},{"column":1,"line":87,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.curate.R","show_error_list":true,"type":1},{"column":1,"line":119,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.curate.R","show_error_list":true,"type":1},{"column":1,"line":120,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.curate.R","show_error_list":true,"type":1},{"column":1,"line":121,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.curate.R","show_error_list":true,"type":1},{"column":1,"line":122,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.curate.R","show_error_list":true,"type":1},{"column":1,"line":135,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.curate.R","show_error_list":true,"type":1},{"column":1,"line":136,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.curate.R","show_error_list":true,"type":1},{"column":1,"line":137,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.curate.R","show_error_list":true,"type":1},{"column":1,"line":138,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.curate.R","show_error_list":true,"type":1},{"column":1,"line":139,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.curate.R","show_error_list":true,"type":1},{"column":1,"line":140,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.curate.R","show_error_list":true,"type":1},{"column":1,"line":48,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":49,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":50,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":51,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":53,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":54,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":55,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":56,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":58,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":59,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":60,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":61,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":64,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":65,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":66,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":67,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":70,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":71,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":73,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":74,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":75,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":76,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":79,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":80,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":81,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":82,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":84,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":86,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":87,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":88,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":90,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":91,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":70,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":51,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":52,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":53,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":54,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":55,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":56,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":57,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":58,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":59,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":60,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":61,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":62,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":63,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":64,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":65,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":66,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":67,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/taxonomy.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":60,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":61,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":62,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":63,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":64,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":65,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":66,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":67,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":68,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":69,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":70,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":71,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":72,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":75,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":76,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":77,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":78,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":79,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":80,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":81,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":82,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":83,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":84,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":85,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":86,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":87,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":88,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":89,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":90,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.dating.R","show_error_list":true,"type":1},{"column":1,"line":59,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":60,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":61,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":62,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":63,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":65,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":66,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":67,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":68,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":69,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":70,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":72,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":73,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":75,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":76,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":77,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":78,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":79,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":80,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":81,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":82,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":83,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":84,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":85,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":86,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":87,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":88,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":89,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":90,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":91,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":92,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":93,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":94,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":95,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":97,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":98,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":99,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":100,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":101,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":102,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":103,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":104,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":105,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":106,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":107,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":108,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":109,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":110,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":111,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":112,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":113,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":114,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":115,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":116,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":118,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":38,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.roguetaxa.R","show_error_list":true,"type":1},{"column":1,"line":39,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.roguetaxa.R","show_error_list":true,"type":1},{"column":1,"line":40,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.roguetaxa.R","show_error_list":true,"type":1},{"column":1,"line":41,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.roguetaxa.R","show_error_list":true,"type":1},{"column":1,"line":42,"log_line":-1,"log_path":"","message":"write unit tests for all functions, and all package code in general. 72% of code lines are covered by test cases.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.roguetaxa.R","show_error_list":true,"type":1},{"column":1,"line":9,"log_line":-1,"log_path":"","message":"avoid long code lines, it is bad for\n        readability. Also, many people prefer editor windows\n        that are about 80 characters wide. Try make your lines\n        shorter than 80 characters","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.aln.R","show_error_list":true,"type":4},{"column":1,"line":21,"log_line":-1,"log_path":"","message":"avoid long code lines, it is bad for\n        readability. Also, many people prefer editor windows\n        that are about 80 characters wide. Try make your lines\n        shorter than 80 characters","path":"~/MEGAsync/Packages/MacMini/phruta/R/SW.phruta.R","show_error_list":true,"type":4},{"column":1,"line":4,"log_line":-1,"log_path":"","message":"avoid long code lines, it is bad for\n        readability. Also, many people prefer editor windows\n        that are about 80 characters wide. Try make your lines\n        shorter than 80 characters","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":4},{"column":1,"line":7,"log_line":-1,"log_path":"","message":"avoid long code lines, it is bad for\n        readability. Also, many people prefer editor windows\n        that are about 80 characters wide. Try make your lines\n        shorter than 80 characters","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":4},{"column":1,"line":8,"log_line":-1,"log_path":"","message":"avoid long code lines, it is bad for\n        readability. Also, many people prefer editor windows\n        that are about 80 characters wide. Try make your lines\n        shorter than 80 characters","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":4},{"column":1,"line":9,"log_line":-1,"log_path":"","message":"avoid long code lines, it is bad for\n        readability. Also, many people prefer editor windows\n        that are about 80 characters wide. Try make your lines\n        shorter than 80 characters","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":4},{"column":1,"line":10,"log_line":-1,"log_path":"","message":"avoid long code lines, it is bad for\n        readability. Also, many people prefer editor windows\n        that are about 80 characters wide. Try make your lines\n        shorter than 80 characters","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":4},{"column":1,"line":12,"log_line":-1,"log_path":"","message":"avoid long code lines, it is bad for\n        readability. Also, many people prefer editor windows\n        that are about 80 characters wide. Try make your lines\n        shorter than 80 characters","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":4},{"column":1,"line":13,"log_line":-1,"log_path":"","message":"avoid long code lines, it is bad for\n        readability. Also, many people prefer editor windows\n        that are about 80 characters wide. Try make your lines\n        shorter than 80 characters","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":4},{"column":1,"line":142,"log_line":-1,"log_path":"","message":"avoid long code lines, it is bad for\n        readability. Also, many people prefer editor windows\n        that are about 80 characters wide. Try make your lines\n        shorter than 80 characters","path":"~/MEGAsync/Packages/MacMini/phruta/tests/testthat/testthat.R","show_error_list":true,"type":4},{"column":1,"line":223,"log_line":-1,"log_path":"","message":"avoid long code lines, it is bad for\n        readability. Also, many people prefer editor windows\n        that are about 80 characters wide. Try make your lines\n        shorter than 80 characters","path":"~/MEGAsync/Packages/MacMini/phruta/tests/testthat/testthat.R","show_error_list":true,"type":4},{"column":1,"line":234,"log_line":-1,"log_path":"","message":"avoid long code lines, it is bad for\n        readability. Also, many people prefer editor windows\n        that are about 80 characters wide. Try make your lines\n        shorter than 80 characters","path":"~/MEGAsync/Packages/MacMini/phruta/tests/testthat/testthat.R","show_error_list":true,"type":4},{"column":1,"line":244,"log_line":-1,"log_path":"","message":"avoid long code lines, it is bad for\n        readability. Also, many people prefer editor windows\n        that are about 80 characters wide. Try make your lines\n        shorter than 80 characters","path":"~/MEGAsync/Packages/MacMini/phruta/tests/testthat/testthat.R","show_error_list":true,"type":4},{"column":1,"line":255,"log_line":-1,"log_path":"","message":"avoid long code lines, it is bad for\n        readability. Also, many people prefer editor windows\n        that are about 80 characters wide. Try make your lines\n        shorter than 80 characters","path":"~/MEGAsync/Packages/MacMini/phruta/tests/testthat/testthat.R","show_error_list":true,"type":4},{"column":1,"line":266,"log_line":-1,"log_path":"","message":"avoid long code lines, it is bad for\n        readability. Also, many people prefer editor windows\n        that are about 80 characters wide. Try make your lines\n        shorter than 80 characters","path":"~/MEGAsync/Packages/MacMini/phruta/tests/testthat/testthat.R","show_error_list":true,"type":4},{"column":5,"line":70,"log_line":-1,"log_path":"","message":"avoid calling setwd(), it changes the global environment.\n        If you need it, consider using on.exit() to restore the\n        working directory.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":9,"line":93,"log_line":-1,"log_path":"","message":"avoid calling setwd(), it changes the global environment.\n        If you need it, consider using on.exit() to restore the\n        working directory.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":9,"line":114,"log_line":-1,"log_path":"","message":"avoid calling setwd(), it changes the global environment.\n        If you need it, consider using on.exit() to restore the\n        working directory.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":5,"line":118,"log_line":-1,"log_path":"","message":"avoid calling setwd(), it changes the global environment.\n        If you need it, consider using on.exit() to restore the\n        working directory.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":28,"line":7,"log_line":-1,"log_path":"","message":"avoid 1:length(...), 1:nrow(...), 1:ncol(...),\n        1:NROW(...) and 1:NCOL(...) expressions. They are error\n        prone and result 1:0 if the expression on the right hand\n        side is zero. Use seq_len() or seq_along() instead.","path":"~/MEGAsync/Packages/MacMini/phruta/R/getListConstraints.R","show_error_list":true,"type":1},{"column":15,"line":38,"log_line":-1,"log_path":"","message":"avoid 1:length(...), 1:nrow(...), 1:ncol(...),\n        1:NROW(...) and 1:NCOL(...) expressions. They are error\n        prone and result 1:0 if the expression on the right hand\n        side is zero. Use seq_len() or seq_along() instead.","path":"~/MEGAsync/Packages/MacMini/phruta/R/getListConstraints.R","show_error_list":true,"type":1},{"column":19,"line":48,"log_line":-1,"log_path":"","message":"avoid 1:length(...), 1:nrow(...), 1:ncol(...),\n        1:NROW(...) and 1:NCOL(...) expressions. They are error\n        prone and result 1:0 if the expression on the right hand\n        side is zero. Use seq_len() or seq_along() instead.","path":"~/MEGAsync/Packages/MacMini/phruta/R/getListConstraints.R","show_error_list":true,"type":1},{"column":19,"line":57,"log_line":-1,"log_path":"","message":"avoid 1:length(...), 1:nrow(...), 1:ncol(...),\n        1:NROW(...) and 1:NCOL(...) expressions. They are error\n        prone and result 1:0 if the expression on the right hand\n        side is zero. Use seq_len() or seq_along() instead.","path":"~/MEGAsync/Packages/MacMini/phruta/R/getListConstraints.R","show_error_list":true,"type":1},{"column":15,"line":69,"log_line":-1,"log_path":"","message":"avoid 1:length(...), 1:nrow(...), 1:ncol(...),\n        1:NROW(...) and 1:NCOL(...) expressions. They are error\n        prone and result 1:0 if the expression on the right hand\n        side is zero. Use seq_len() or seq_along() instead.","path":"~/MEGAsync/Packages/MacMini/phruta/R/getListConstraints.R","show_error_list":true,"type":1},{"column":19,"line":79,"log_line":-1,"log_path":"","message":"avoid 1:length(...), 1:nrow(...), 1:ncol(...),\n        1:NROW(...) and 1:NCOL(...) expressions. They are error\n        prone and result 1:0 if the expression on the right hand\n        side is zero. Use seq_len() or seq_along() instead.","path":"~/MEGAsync/Packages/MacMini/phruta/R/getListConstraints.R","show_error_list":true,"type":1},{"column":19,"line":88,"log_line":-1,"log_path":"","message":"avoid 1:length(...), 1:nrow(...), 1:ncol(...),\n        1:NROW(...) and 1:NCOL(...) expressions. They are error\n        prone and result 1:0 if the expression on the right hand\n        side is zero. Use seq_len() or seq_along() instead.","path":"~/MEGAsync/Packages/MacMini/phruta/R/getListConstraints.R","show_error_list":true,"type":1},{"column":13,"line":74,"log_line":-1,"log_path":"","message":"avoid 1:length(...), 1:nrow(...), 1:ncol(...),\n        1:NROW(...) and 1:NCOL(...) expressions. They are error\n        prone and result 1:0 if the expression on the right hand\n        side is zero. Use seq_len() or seq_along() instead.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/getListConstraints.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/getListConstraints.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.add.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.add.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.aln.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.aln.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.curate.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.curate.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.curate.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.partitionfinderv1.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/sq.retrieve.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.constraint.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.constraint.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.constraint.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.constraint.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.constraint.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1},{"column":1,"line":1,"log_line":-1,"log_path":"","message":"avoid &#x27;T&#x27; and &#x27;F&#x27;, as they are just variables which are set to the\n        logicals &#x27;TRUE&#x27; and &#x27;FALSE&#x27; by default, but are not reserved words\n        and hence can be overwritten by the user.  Hence, one should\n        always use &#x27;TRUE&#x27; and &#x27;FALSE&#x27; for the logicals.","path":"~/MEGAsync/Packages/MacMini/phruta/R/tree.raxml.R","show_error_list":true,"type":1}],"name":"goodpractice"}]}