invisible(
lapply(seq_along(taxa), function(x) {
if(!is.na(ret_seqs[[x]]$sequences)){
write(
ret_seqs[[x]]$sequences,
paste0('0.Sequences/',gene,".fasta"),
sep = "\n",
append = TRUE
)
}
})
)
}
}
if(length(unlist(ret_seqs))>1){
invisible(
lapply(seq_along(taxa), function(x) {
if(!is.na(ret_seqs[[x]]$sequences)){
write(
ret_seqs[[x]]$sequences,
paste0('0.Sequences/',gene,".fasta"),
sep = "\n",
append = TRUE
)
}
})
)
}
singleGene(genes[1])
singleGene(genes[2])
genes[2]
gene=genes[2]
ret_seqs <- lapply(seq_along(taxa), function(x) {
tryCatch({
targetsp <-
paste0(taxa[x], '[ORGN] AND ',gene, "[Gene] AND 1:" , maxlength, "[SLEN]")
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
if (length(res_rearch$ids) == 0) {
return(list(
taxa = taxa[x],
gene = genes[y],
data = F,
sequences = NA
))
} else{
res_seqs <-
entrez_fetch(db = "nuccore",
id = res_rearch$ids,
rettype = "fasta")
return(list(
taxa = taxa[x],
gene = genes[y],
data = F,
sequences = res_seqs
))
}
}, error=function(e){})})
ret_seqs
taxa
x=1
targetsp <-
paste0(taxa[x], '[ORGN] AND ',gene, "[Gene] AND 1:" , maxlength, "[SLEN]")
targetsp
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
res_rearch
if (length(res_rearch$ids) == 0) {
return(list(
taxa = taxa[x],
gene = genes[y],
data = F,
sequences = NA
))
} else{
res_seqs <-
entrez_fetch(db = "nuccore",
id = res_rearch$ids,
rettype = "fasta")
return(list(
taxa = taxa[x],
gene = genes[y],
data = F,
sequences = res_seqs
))
}
singleGene <-  function(gene) {
ret_seqs <- lapply(seq_along(taxa), function(x) {
tryCatch({
targetsp <-
paste0(taxa[x], '[ORGN] AND ',gene, "[Gene] AND 1:" , maxlength, "[SLEN]")
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
if (length(res_rearch$ids) == 0) {
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = NA
))
} else{
res_seqs <-
entrez_fetch(db = "nuccore",
id = res_rearch$ids,
rettype = "fasta")
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = res_seqs
))
}
}, error=function(e){})})
if(length(unlist(ret_seqs))>1){
invisible(
lapply(seq_along(taxa), function(x) {
if(!is.na(ret_seqs[[x]]$sequences)){
write(
ret_seqs[[x]]$sequences,
paste0('0.Sequences/',gene,".fasta"),
sep = "\n",
append = TRUE
)
}
})
)
}
}
singleGene(genes[2])
singleGene <-  function(gene) {
ret_seqs <- lapply(seq_along(taxa), function(x) {
tryCatch({
targetsp <-
paste0(taxa[x], '[ORGN] AND ',gene, "[Gene] AND 1:" , maxlength, "[SLEN]")
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
if (length(res_rearch$ids) == 0) {
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = NA
))
} else{
res_seqs <-
entrez_fetch(db = "nuccore",
id = res_rearch$ids,
rettype = "fasta")
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = res_seqs
))
}
}, error=function(e){})})
invisible(
lapply(seq_along(taxa), function(x) {
if(!is.na(ret_seqs[[x]]$sequences)){
write(
ret_seqs[[x]]$sequences,
paste0('0.Sequences/',gene,".fasta"),
sep = "\n",
append = TRUE
)
}
})
)
}
singleGene(genes[2])
singleGene(genes[1])
sq.retrieve <- function(clades=NULL, species=NULL, genes, maxseqs=1, maxlength=5000) {
##Find the species
taxa <- if(!is.null(clades)){
clade.species<-downstream(clades, db = 'itis', downto = 'species', verbose = F)
clade.species<-do.call(rbind,clade.species)
c(clade.species$taxonname, species)
}else{
species
}
unlink("0.Sequences", recursive = TRUE)
dir.create('0.Sequences')
singleGene <-  function(gene) {
ret_seqs <- lapply(seq_along(taxa), function(x) {
tryCatch({
targetsp <-
paste0(taxa[x], '[ORGN] AND ',gene, "[Gene] AND 1:" , maxlength, "[SLEN]")
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
if (length(res_rearch$ids) == 0) {
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = NA
))
} else{
res_seqs <-
entrez_fetch(db = "nuccore",
id = res_rearch$ids,
rettype = "fasta")
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = res_seqs
))
}
}, error=function(e){})})
invisible(
lapply(seq_along(taxa), function(x) {
if(!is.na(ret_seqs[[x]]$sequences)){
write(
ret_seqs[[x]]$sequences,
paste0('0.Sequences/',gene,".fasta"),
sep = "\n",
append = TRUE
)
}
})
)
}
Full_sequences = pblapply(genes, singleGene)
names(Full_sequences) <- genes
#
#   unsampled_taxa <- lapply(Full_sequences, function(x){
#       unsampled<-is.na(unlist(lapply(seq_along(x), function(y) x[[y]][[4]])))
#       unlist(lapply(seq_along(x), function(y) x[[y]][[1]]))[unsampled]
#   })
#   unsampled_taxa<-Reduce(intersect, unsampled_taxa)
#   return(unsampled_taxa)
}
library(phruta)
##Gene sampling from https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.3000494#sec030
start_time <- Sys.time()
start_time <- Sys.time()
sq.retrieve(
clades = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes = c(
"A2AB",
"ADORA3",
"ADRB2",
"APOB",
"APP",
"ATP7",
"BCHE",
"BDNF",
"BMI1",
"BRCA1",
"BRCA2",
"CNR1",
"COI",
"CREM",
"CYTB",
"DMP1",
"EDG1",
"ENAM",
"FBN1",
"GHR",
"IRBP",
"ND1",
"ND2",
"PLCB4",
"PNOC",
"RAG1a",
"RAG1b",
"RAG2",
"TTN",
"TYR1",
"VWF"
)
)
sq.curate(filterTaxonomicCriteria='Felis|Vulpes|Phoca|Manis', kingdom='animals', folder='0.Sequences')
sq.aln(folder='1.CuratedSequences')
tree.raxml(folder='2.Alignments', FilePatterns= 'Masked', raxml_exec='raxmlHPC', Bootstrap=100, outgroup ="Manis_pentadactyla")
tree.dating(taxonomyFolder="1.CuratedSequences", phylogenyFolder="3.Phylogeny", scale='treePL')
end_time <- Sys.time()
elapsed_time<- end_time - start_time
elapsed_time
setwd("~/MEGAsync/Packages/MacMini/phruta")
library(phruta)
install.packages("roxygen2")
library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
load("~/MEGAsync/Packages/MacMini/phruta/data/SW.phruta.RData")
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
end_time
## loading the package
library("ggmsa")
install.packages("ggmsa")
## loading the package
library("ggmsa")
setwd("~/Desktop/examplesPipe/3.Phylogeny")
available_msa()
protein_sequences <- system.file("extdata", "sample.fasta", package = "ggmsa")
protein_sequences
setwd("~/MEGAsync/Packages/MacMini/phruta")
roxygenise()
library(phruta)
roxygenise()
roxygenise()
setwd("~/Desktop/test2")
brew cask install mactex
tree.raxml(folder='2.Alignments', FilePatterns= 'Masked', raxml_exec='raxmlHPC', Bootstrap=100, outgroup ="Manis_pentadactyla")
use_mit_license()
install.packages("usethis")
library(usethis)
roxygenise()
library(roxygen2)
roxygenise()
roxygenise()
load("~/MEGAsync/Packages/MacMini/phruta/data/SW.phruta.RData")
roxygenise()
methods::as.character
methods::as.matrix
?as.matrix
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
utils::globalVariables(c("prob", "section", "y"))
roxygenise()
roxygenise()
roxygenise()
roxygenise()
install.packages("usethis")
install.packages("usethis")
usethis::use_pkgdown()
install.packages("pkgdown")
usethis::use_pkgdown()
pkgdown::build_site()
?build_home
usethis::use_git()
usethis::use_github()
usethis::use_github()
pkgdown::build_site()
roxygenise()
pkgdown::build_site()
pkgdown::build_site()
rmarkdown::render("vignettes/phruta_vignette.Rmd", "all")
rmarkdown::render("vignettes/phruta_vignette.Rmd", "all")
rmarkdown::render("vignettes/phruta_vignette.Rmd", "all")
rmarkdown::render("vignettes/phruta_vignette.Rmd", "all")
rmarkdown::render("vignettes/phruta_vignette.Rmd", "all")
pkgdown::build_site()
pkgdown::build_site()
rmarkdown::render("vignettes/phruta_vignette.Rmd", "all")
roxygenise()
roxygenise()
library(phruta)
rmarkdown::render("vignettes/phruta_vignette.Rmd", "all")
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
install.packages("goodpractice")
goodpractice::gp()
library('Rogue')
library(ape)
trees <- read.tree("RAxML_bootstrap.phruta")
RogueTaxa(trees, dropsetSize = 2)
bootTrees
RogueTaxa
RogueTaxa(trees, dropsetSize = 2)
trees <- read.tree("RAxML_bootstrap.phruta")
setwd("~/Desktop/test2/3.Phylogeny")
trees <- read.tree("RAxML_bootstrap.phruta")
RogueTaxa(trees, dropsetSize = 2)
trees <- read.tree("RAxML_bootstrap.phruta")
BestTree<-read.tree("RAxML_bestTree.phruta")
RogueTaxa(trees, dropsetSize = 2, bestTree=BestTree)
getwd()
BestTree<-read.tree("RAxML_bipartitions.phruta")
RogueTaxa(trees, dropsetSize = 2, bestTree=BestTree)
trees <- read.tree("RAxML_bootstrap.phruta")
BestTree<-read.tree("RAxML_bipartitions.phruta")
RogueTaxa(trees, dropsetSize = 2, bestTree=BestTree)
RT<-RogueTaxa(trees, dropsetSize = 2, bestTree=BestTree)
RT
setwd("~/Desktop/test2")
trees <- read.tree("3.Phylogeny/RAxML_bootstrap.phruta")
BestTree<-read.tree("3.Phylogeny/RAxML_bipartitions.phruta")
RT<-RogueTaxa(trees, dropsetSize = 2, bestTree=BestTree)
trees <- read.tree("3.Phylogeny/RAxML_bootstrap.phruta")
BestTree<-read.tree("3.Phylogeny/RAxML_bipartitions.phruta")
RT<-RogueTaxa(trees, dropsetSize = 2, bestTree=BestTree)
unlink('3.1.RogueTaxa')
dir.create('3.1.RogueTaxa')
write.csv(RT, 'RogueTaxa.csv')
write.csv(RT, '3.1.RogueTaxa/RogueTaxa.csv')
?RogueTaxa
RT<-RogueTaxa(trees, bestTree=BestTree)
RT
library(phruta)
setwd("~/Desktop/test2")
folder = "2.Alignments"
FilePatterns = "Masked"
raxml_exec = "raxmlHPC"
Bootstrap ==2
Bootstrap = 2
if (is.null(folder)) stop("Please provide folder names")
if (!is.character(raxml_exec)) stop("Please provide a raxml_exec argument of class character")
if (!is.numeric(Bootstrap)) stop("Please provide a number for the Bootstrap argument")
if (Bootstrap == 0) stop("Please indicate more than a single bootstrap replicate")
files_fullNames <- list.files(folder, FilePatterns, full.names = T)
files <- list.files(folder, "Masked")
seq <- lapply(lapply(files_fullNames, read.FASTA), as.matrix)
names(seq) <- files
concatenated <- do.call(cbind.DNAbin, c(seq,
fill.with.gaps = TRUE
))
concatenated
seq
seq
seq[[1]]
length(seq[[1]])
if(partitioned ==T){
lapply(seq, function(x) length(x) )
}
lapply(seq, function(x) length(x) )
?raxml.partitions
do.call(c,seq)
seq
do.call(c,seq)
seq
class(seq)
do.call(function, c(c,seq, list(all=TRUE)))
do.call(raxml.partitions, c(c,seq, list(all=TRUE)))
data(ips.cox1)
data(ips.16S)
data(ips.28S)
library(ips)
data(ips.cox1)
data(ips.16S)
data(ips.28S)
raxml.partitions(cox1 = ips.cox1,
r16S = ips.16S,
r28S = ips.28S)
n<-raxml.partitions(cox1 = ips.cox1,
r16S = ips.16S,
r28S = ips.28S)
class(n)
lapply(seq, length)
ds_l<-lapply(seq, length)
n
data.frame(type='DNA',locus=names(ds_l))
partition<-data.frame(type='DNA',locus=names(ds_l))
cumsum(ds_l)
n
cumsum(ds_l)
to<-cumsum(ds_l)
to+1
(0,to+1)
from<-c(0,to+1)
from
cbind.data.frame(partition,from,to )
ds_l<-lapply(seq, length)
partition<-data.frame(type='DNA',locus=names(ds_l))
to<-cumsum(ds_l)
from<-c(1,to+1)
from
cbind.data.frame(partition,from[length(from)],to )
from
to
ds_l<-lapply(seq, length)
partition<-data.frame(type='DNA',locus=names(ds_l))
to<-cumsum(ds_l)
from<-c(1,to+1)
from
to
cbind.data.frame(partition,from[length(from)],to )
cbind.data.frame(partition,from=from[length(from)],to=to )
do.call(raxml.partitions, seq)
partitions<-do.call(raxml.partitions, seq)
partitions
raxml.partitions
seq
seq
?raxml
setwd("~/MEGAsync/Packages/MacMini/phruta")
?RogueTaxa
