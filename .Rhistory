"[ORGN] AND ",
gene,
"[TI] AND 1:",
maxlength,
"[SLEN]
NOT Predicted
NOT UNVERIFIED
NOT sp.")
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
if (length(res_rearch$ids) == 0) {
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = NA
))
} else {
res_seqs <-
entrez_fetch(db = "nuccore",
id = res_rearch$ids,
rettype = "fasta")
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = res_seqs
))
}
},
error = function(e) {
})
})
ret_seqs <- lapply(seq_along(taxa), function(x) {
tryCatch({
targetsp <-
paste0(taxa[x],
"[ORGN] AND ",
gene,
"[TI] AND 1:",
maxlength,
"[SLEN]
NOT Predicted
NOT UNVERIFIED
NOT sp.")
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
if (length(res_rearch$ids) == 0) {
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = NA
))
} else {
res_seqs <-
entrez_fetch(db = "nuccore",
id = res_rearch$ids,
rettype = "fasta")
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = res_seqs
))
}
},
error = function(e) {
})
})
ret_seqs
taxa[1]
x=1
targetsp <-
paste0(taxa[x],
"[ORGN] AND ",
gene,
"[TI] AND 1:",
maxlength,
"[SLEN]
NOT Predicted
NOT UNVERIFIED
NOT sp.")
targetsp
targetsp <-
paste0(taxa[x],
"[ORGN] AND ",
gene,
"[TI] AND 1:",
maxlength,
"[SLEN] NOT Predicted NOT UNVERIFIED NOT sp.")
targetsp
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
library(rentrez)
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
res_rearch
targetsp
res_rearch$QueryTranslation
#' Retrieve sequences from genbank
#'
#' Downloads sequences from genbank (nucleotide database) for particular taxa
#' and genes into a folder called \code{"0.Sequences"}.
#'
#' @param clades A vector listing taxonomic groups of interest (character).
#' @param species A vector listing additional species interest (character).
#'                This argument can be used to define additional target species
#'                in the ingroup or species to be sampled in the outgroup
#'                (character).
#' @param genes A vector listing gene names of interest (character).
#' @param maxseqs Maximum number of sequences to retrieve per search
#'                (taxa + gene) (numeric).
#' @param maxlength Maximum length of the gene sequence (numeric).
#' @param multicore Whether multiple searchers should be conducted simultaneously
#'
#' @return None
#'
#' @import pbapply
#' @import rentrez
#' @import taxize
#' @import parallel
#' @import pbmcapply
#'
#' @examples
#' \dontrun{
#' sq.retrieve(
#'   clades = c("Felis", "Vulpes", "Phoca"),
#'   species = "Manis_pentadactyla",
#'   genes = c("ADORA3", "CYTB")
#' )
#' }
#' @export
sq.retrieve <-
function(clades = NULL,
species = NULL,
genes = NULL,
maxseqs = 1,
maxlength = 5000,
multicore= FALSE) {
if (is.null(clades) &
is.null(species))
stop("Please provide at least one clade or species")
if (!is.null(clades)) {
if (!is.character(clades))
stop("Please provide at character vector for the clade arguments")
}
if (!is.null(species)) {
if (!is.character(species))
stop("Please provide at character vector for  the species arguments")
}
if (is.null(genes))
stop("Please provide the name of at least one gene")
if (!is.numeric(maxseqs) |
!is.numeric(maxlength))
stop("maxseqs and maxlength must be numeric")
if (length(maxseqs) > 1 |
length(maxlength) > 1)
stop("Please provide a single number for maxseqs or maxlength")
taxa <- if (!is.null(clades)) {
clade.species <-
taxize::downstream(clades,
db = "itis",
downto = "species",
verbose = F)
clade.species <- do.call(rbind, clade.species)
c(clade.species$taxonname, species)
} else {
species
}
unlink("0.Sequences", recursive = TRUE)
dir.create("0.Sequences")
singleGene <- function(gene) {
ret_seqs <- lapply(seq_along(taxa), function(x) {
tryCatch({
targetsp <-
paste0(taxa[x],
"[ORGN] AND ",
gene,
"[TI] AND 1:",
maxlength,
"[SLEN] NOT Predicted NOT UNVERIFIED NOT sp.")
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
if (length(res_rearch$ids) == 0) {
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = NA
))
} else {
res_seqs <-
entrez_fetch(db = "nuccore",
id = res_rearch$ids,
rettype = "fasta")
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = res_seqs
))
}
},
error = function(e) {
})
})
invisible(lapply(seq_along(taxa), function(x) {
if (!is.na(ret_seqs[[x]]$sequences)) {
write(
ret_seqs[[x]]$sequences,
paste0("0.Sequences/", gene, ".fasta"),
sep = "\n",
append = TRUE
)
}
}))
}
invisible(
if(isTRUE(multicore) & length(grep("windows", Sys.info()["sysname"], ignore.case = TRUE)) ==0 ){
ncores <- parallel::detectCores()-2
pbmcapply::pbmclapply(genes, function(x){
tryCatch({
singleGene(x)
}, error=function(e){cat('Skipping...', x, 'try again later...')})
}, mc.cores=ncores)
}else{
pblapply(genes, function(x){
tryCatch({
singleGene(x)
}, error=function(e){cat('Skipping...', x, 'try again later...')})
})
}
)
}
singleGene <- function(gene) {
ret_seqs <- lapply(seq_along(taxa), function(x) {
tryCatch({
targetsp <-
paste0(taxa[x],
"[ORGN] AND ",
gene,
"[TI] AND 1:",
maxlength,
"[SLEN] NOT Predicted NOT UNVERIFIED NOT sp.")
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
if (length(res_rearch$ids) == 0) {
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = NA
))
} else {
res_seqs <-
entrez_fetch(db = "nuccore",
id = res_rearch$ids,
rettype = "fasta")
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = res_seqs
))
}
},
error = function(e) {
})
})
invisible(lapply(seq_along(taxa), function(x) {
if (!is.na(ret_seqs[[x]]$sequences)) {
write(
ret_seqs[[x]]$sequences,
paste0("0.Sequences/", gene, ".fasta"),
sep = "\n",
append = TRUE
)
}
}))
}
genes
x="Cyrb"
x="Cytb"
singleGene(x)
library(phruta)
setwd("~/Desktop/pruta_testing")
library(phruta)
sq.retrieve(
clades  = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes   = c("A2AB","ADORA3","ADRB2","APOB",
"APP","ATP7","BCHE","BDNF"),
multicore = TRUE
)
sq.retrieve(
clades  = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes   = c("A2AB","ADORA3","ADRB2","APOB",
"APP","ATP7","BCHE","BDNF",
"BMI1","BRCA1","BRCA2","CNR1",
"COI","CREM","CYTB","DMP1",
"EDG1","ENAM","FBN1","GHR",
"IRBP","ND1","ND2","PLCB4",
"PNOC","RAG1a","RAG1b","RAG2",
"TTN","TYR1","VWF"),
multicore = TRUE
)
sq.curate(filterTaxonomicCriteria='Felis|Vulpes|Phoca|Manis',
kingdom='animals',
folder='0.Sequences')
library(msa)
sq.curate(filterTaxonomicCriteria='Felis|Vulpes|Phoca|Manis',
kingdom='animals',
folder='0.Sequences')
library(msa)
c("A2AB","ADORA3","ADRB2","APOB",
"APP","ATP7","BCHE","BDNF",
"BMI1","BRCA1","BRCA2","CNR1",
"COI","CREM","CYTB","DMP1",
"EDG1","ENAM","FBN1","GHR",
"IRBP","ND1","ND2","PLCB4",
"PNOC","RAG1a","RAG1b","RAG2",
"TTN","TYR1","VWF")
c('Felis', 'Vulpes', 'Phoca')
library(phruta)
library(msa)
library(phruta)
library(msa)
library(phruta)
library(msa)
sq.retrieve(
clades  = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes   = c("A2AB","ADORA3","ADRB2","APOB",
"APP","ATP7","BCHE","BDNF",
"BMI1","BRCA1","BRCA2","CNR1",
"COI","CREM","CYTB","DMP1",
"EDG1","ENAM","FBN1","GHR",
"IRBP","ND1","ND2","PLCB4",
"PNOC","RAG1a","RAG1b","RAG2",
"TTN","TYR1","VWF"),
multicore = TRUE
)
sq.curate(filterTaxonomicCriteria='Felis|Vulpes|Phoca|Manis',
kingdom='animals',
folder='0.Sequences')
sq.curate(filterTaxonomicCriteria='Felis|Vulpes|Phoca|Manis',
kingdom='animals',
folder='0.Sequences')
taxa
taxa='Felis silvestris'
x=1
gene='coi'
maxlength=5000
targetsp <-
paste0(taxa[x],
"[ORGN] AND ",
gene,
"[TI] AND 1:",
maxlength,
"[SLEN] NOT Predicted NOT UNVERIFIED NOT sp.")
targetsp
taxa="Manis_pentadactyla"
x[1]
targetsp <-
paste0(taxa[x],
"[ORGN] AND ",
gene,
"[TI] AND 1:",
maxlength,
"[SLEN] NOT Predicted NOT UNVERIFIED NOT sp.")
targetsp
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
library(rentrez)
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
maxseqs
maxseqs=1
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
res_rearch
length(res_rearch$ids)
res_seqs <-
entrez_fetch(db = "nuccore",
id = res_rearch$ids,
rettype = "fasta")
res_seqs
clades  = c('Felis', 'Vulpes', 'Phoca')
species = 'Manis_pentadactyla'
genes   = c("A2AB","ADORA3","ADRB2","APOB",
"APP","ATP7","BCHE","BDNF",
"BMI1","BRCA1","BRCA2","CNR1",
"COI","CREM","CYTB","DMP1",
"EDG1","ENAM","FBN1","GHR",
"IRBP","ND1","ND2","PLCB4",
"PNOC","RAG1a","RAG1b","RAG2",
"TTN","TYR1","VWF")
taxa <- if (!is.null(clades)) {
clade.species <-
taxize::downstream(clades,
db = "itis",
downto = "species",
verbose = F)
clade.species <- do.call(rbind, clade.species)
c(clade.species$taxonname, species)
} else {
species
}
taxa
unlink("0.Sequences", recursive = TRUE)
dir.create("0.Sequences")
singleGene <- function(gene) {
ret_seqs <- lapply(seq_along(taxa), function(x) {
tryCatch({
targetsp <-
paste0(taxa[x],
"[ORGN] AND ",
gene,
"[TI] AND 1:",
maxlength,
"[SLEN] NOT Predicted NOT UNVERIFIED NOT sp.")
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
if (length(res_rearch$ids) == 0) {
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = NA
))
} else {
res_seqs <-
entrez_fetch(db = "nuccore",
id = res_rearch$ids,
rettype = "fasta")
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = res_seqs
))
}
},
error = function(e) {
})
})
invisible(lapply(seq_along(taxa), function(x) {
if (!is.na(ret_seqs[[x]]$sequences)) {
write(
ret_seqs[[x]]$sequences,
paste0("0.Sequences/", gene, ".fasta"),
sep = "\n",
append = TRUE
)
}
}))
}
singleGene('coi')
ncores <- parallel::detectCores()-2
genes
ncores
ncores <- parallel::detectCores()-2
pbmcapply::pbmclapply(genes, function(x){
tryCatch({
singleGene(x)
}, error=function(e){cat('Skipping...', x, 'try again later...')})
}, mc.cores=ncores)
genes
gene='COI'
singleGene(x)
x
library(phruta)
library(msa)
sq.retrieve(
clades  = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes   = c("A2AB","ADORA3","ADRB2","APOB",
"APP","ATP7","BCHE","BDNF",
"BMI1","BRCA1","BRCA2","CNR1",
"COI","CREM","CYTB","DMP1",
"EDG1","ENAM","FBN1","GHR",
"IRBP","ND1","ND2","PLCB4",
"PNOC","RAG1a","RAG1b","RAG2",
"TTN","TYR1","VWF"),
multicore = FALSE
)
sq.curate(filterTaxonomicCriteria='Felis|Vulpes|Phoca|Manis',
kingdom='animals',
folder='0.Sequences')
sq.aln(folder='1.CuratedSequences')
