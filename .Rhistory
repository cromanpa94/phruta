if(length(unlist(ret_seqs))>1){
invisible(
lapply(seq_along(taxa), function(x) {
if(!is.na(ret_seqs[[x]]$sequences)){
write(
ret_seqs[[x]]$sequences,
paste0('0.Sequences/',gene,".fasta"),
sep = "\n",
append = TRUE
)
}
})
)
}
}
singleGene(genes[2])
singleGene <-  function(gene) {
ret_seqs <- lapply(seq_along(taxa), function(x) {
tryCatch({
targetsp <-
paste0(taxa[x], '[ORGN] AND ',gene, "[Gene] AND 1:" , maxlength, "[SLEN]")
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
if (length(res_rearch$ids) == 0) {
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = NA
))
} else{
res_seqs <-
entrez_fetch(db = "nuccore",
id = res_rearch$ids,
rettype = "fasta")
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = res_seqs
))
}
}, error=function(e){})})
invisible(
lapply(seq_along(taxa), function(x) {
if(!is.na(ret_seqs[[x]]$sequences)){
write(
ret_seqs[[x]]$sequences,
paste0('0.Sequences/',gene,".fasta"),
sep = "\n",
append = TRUE
)
}
})
)
}
singleGene(genes[2])
singleGene(genes[1])
sq.retrieve <- function(clades=NULL, species=NULL, genes, maxseqs=1, maxlength=5000) {
##Find the species
taxa <- if(!is.null(clades)){
clade.species<-downstream(clades, db = 'itis', downto = 'species', verbose = F)
clade.species<-do.call(rbind,clade.species)
c(clade.species$taxonname, species)
}else{
species
}
unlink("0.Sequences", recursive = TRUE)
dir.create('0.Sequences')
singleGene <-  function(gene) {
ret_seqs <- lapply(seq_along(taxa), function(x) {
tryCatch({
targetsp <-
paste0(taxa[x], '[ORGN] AND ',gene, "[Gene] AND 1:" , maxlength, "[SLEN]")
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
if (length(res_rearch$ids) == 0) {
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = NA
))
} else{
res_seqs <-
entrez_fetch(db = "nuccore",
id = res_rearch$ids,
rettype = "fasta")
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = res_seqs
))
}
}, error=function(e){})})
invisible(
lapply(seq_along(taxa), function(x) {
if(!is.na(ret_seqs[[x]]$sequences)){
write(
ret_seqs[[x]]$sequences,
paste0('0.Sequences/',gene,".fasta"),
sep = "\n",
append = TRUE
)
}
})
)
}
Full_sequences = pblapply(genes, singleGene)
names(Full_sequences) <- genes
#
#   unsampled_taxa <- lapply(Full_sequences, function(x){
#       unsampled<-is.na(unlist(lapply(seq_along(x), function(y) x[[y]][[4]])))
#       unlist(lapply(seq_along(x), function(y) x[[y]][[1]]))[unsampled]
#   })
#   unsampled_taxa<-Reduce(intersect, unsampled_taxa)
#   return(unsampled_taxa)
}
library(phruta)
##Gene sampling from https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.3000494#sec030
start_time <- Sys.time()
start_time <- Sys.time()
sq.retrieve(
clades = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes = c(
"A2AB",
"ADORA3",
"ADRB2",
"APOB",
"APP",
"ATP7",
"BCHE",
"BDNF",
"BMI1",
"BRCA1",
"BRCA2",
"CNR1",
"COI",
"CREM",
"CYTB",
"DMP1",
"EDG1",
"ENAM",
"FBN1",
"GHR",
"IRBP",
"ND1",
"ND2",
"PLCB4",
"PNOC",
"RAG1a",
"RAG1b",
"RAG2",
"TTN",
"TYR1",
"VWF"
)
)
sq.curate(filterTaxonomicCriteria='Felis|Vulpes|Phoca|Manis', kingdom='animals', folder='0.Sequences')
sq.aln(folder='1.CuratedSequences')
tree.raxml(folder='2.Alignments', FilePatterns= 'Masked', raxml_exec='raxmlHPC', Bootstrap=100, outgroup ="Manis_pentadactyla")
tree.dating(taxonomyFolder="1.CuratedSequences", phylogenyFolder="3.Phylogeny", scale='treePL')
end_time <- Sys.time()
elapsed_time<- end_time - start_time
elapsed_time
setwd("~/MEGAsync/Packages/MacMini/phruta")
library(phruta)
install.packages("roxygen2")
library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
load("~/MEGAsync/Packages/MacMini/phruta/data/SW.phruta.RData")
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
end_time
## loading the package
library("ggmsa")
install.packages("ggmsa")
## loading the package
library("ggmsa")
setwd("~/Desktop/examplesPipe/3.Phylogeny")
available_msa()
protein_sequences <- system.file("extdata", "sample.fasta", package = "ggmsa")
protein_sequences
setwd("~/MEGAsync/Packages/MacMini/phruta")
roxygenise()
library(phruta)
roxygenise()
roxygenise()
setwd("~/Desktop/test2")
brew cask install mactex
tree.raxml(folder='2.Alignments', FilePatterns= 'Masked', raxml_exec='raxmlHPC', Bootstrap=100, outgroup ="Manis_pentadactyla")
pkgdown::build_site()
install.packages(c('rgbif','pbapply','rentrez','taxize','ape','ips','geiger'))
library(phruta)
library(phruta)
library(crayon)
cat(green("\u2713"), "|", j, "text", i, "\n")
green("\u2713")
cat(green("\u2713"))
library(phruta)
setwd("~/Desktop/test")
library(phruta)
?sq.retrieve
getwd()
sq.retrieve(
clades = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes = c("ADORA3", "COI", "CYTB")
)
sq.retrieve(
clades = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes = c("ADORA3", "COI", "CYTB")
)
cat("\u2059", "| Processing sequences for gene region:", x, "\n")
x='ge'
cat("\u2022", "| Processing sequences for gene region:", x, "\n")
cat("\u2059", "| Processing sequences for gene region:", x, "\n")
cat("\u2058", "| Processing sequences for gene region:", x, "\n")
cat(green("\u2713"), "| Done with gene region:", x, "\n")
#' Retrieve sequences from genbank
#'
#' Downloads sequences from genbank (nucleotide database) for particular taxa and genes
#' into a folder called \code{"0.Sequences"}.
#'
#' @param clades A vector listing taxonomic groups of interest (character).
#' @param species A vector listing additional species interest (character).
#'                This argument can be used to define additional target species
#'                in the ingroup or species to be sampled in the outgroup (character).
#' @param genes A vector listing gene names of interest (character).
#' @param maxseqs Maximum number of sequences to retrieve per search (taxa + gene) (numeric).
#' @param maxlength Maximum lenght of the gene sequence (numeric).
#'
#' @return None
#'
#' @import pbapply
#' @import rentrez
#' @import taxize
#' @import crayon
#'
#' @examples
#' \dontrun{
#' sq.retrieve(
#'             clades = c('Felis', 'Vulpes', 'Phoca'),
#'             species = 'Manis_pentadactyla' ,
#'             genes = c("ADORA3")
#'            )
#'}
#' @export
sq.retrieve <- function(clades=NULL, species=NULL, genes=NULL, maxseqs=1, maxlength=5000) {
taxa <- if(!is.null(clades)){
clade.species<-downstream(clades, db = 'itis', downto = 'species', verbose = F)
clade.species<-do.call(rbind,clade.species)
c(clade.species$taxonname, species)
}else{
species
}
unlink("0.Sequences", recursive = TRUE)
dir.create('0.Sequences')
singleGene <-  function(gene) {
ret_seqs <- lapply(seq_along(taxa), function(x) {
tryCatch({
cat("\u2059", "| Processing sequences for gene region:", gene, "\n")
targetsp <-
paste0(taxa[x], '[ORGN] AND ',gene, "[Gene] AND 1:" , maxlength, "[SLEN]")
cat("\u2058", "| Processing sequences for gene region:", gene, "\n")
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
cat("\u2059", "| Processing sequences for gene region:", gene, "\n")
if (length(res_rearch$ids) == 0) {
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = NA
))
} else{
res_seqs <-
entrez_fetch(db = "nuccore",
id = res_rearch$ids,
rettype = "fasta")
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = res_seqs
))
}
cat("\u2058", "| Processing sequences for gene region:", gene, "\n")
}, error=function(e){})})
invisible(
lapply(seq_along(taxa), function(x) {
cat("\u2058", "| Processing sequences for gene region:", gene, "\n")
if(!is.na(ret_seqs[[x]]$sequences)){
write(
ret_seqs[[x]]$sequences,
paste0('0.Sequences/',gene,".fasta"),
sep = "\n",
append = TRUE
)
}
cat("\u2059", "| Processing sequences for gene region:", gene, "\n")
})
)
}
invisible( lapply(genes, function(x){
cat("\u2022", "| Processing sequences for gene region:", x, "\n")
flush.console()
resS<-singleGene(x)
cat(green("\u2713"), "| Done with gene region:", x, "\n")
return(resS)
})
)
}
sq.retrieve(
clades = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes = c("ADORA3", "COI", "CYTB")
)
library(phruta)
sq.retrieve(
clades = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes = c("ADORA3", "COI", "CYTB")
)
library(taxize)
sq.retrieve(
clades = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes = c("ADORA3", "COI", "CYTB")
)
cat("\u2022", "| Processing sequences for gene region:", x, "\n")
flush.console()
cat("\u2022", "| Processing sequences for gene region:", x, "\n")
library(phruta)
sq.retrieve(
clades = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes = c("ADORA3", "COI", "CYTB")
)
library(phruta)
sq.retrieve(
clades = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes = c("ADORA3", "COI", "CYTB")
)
sq.retrieve(
clades = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes = c("ADORA3", "COI", "CYTB")
)
library(phruta)
remove.packages("phruta")
library(phruta)
sq.retrieve(
clades = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes = c("ADORA3", "COI", "CYTB")
)
singleGene <-  function(gene) {
ret_seqs <- lapply(seq_along(taxa), function(x) {
tryCatch({
targetsp <-
paste0(taxa[x], '[ORGN] AND ',gene, "[Gene] AND 1:" , maxlength, "[SLEN]")
res_rearch <-
entrez_search(db = "nuccore",
term = targetsp,
retmax = maxseqs)
if (length(res_rearch$ids) == 0) {
cat(red("\u2717"), "| No sequences found for", gene, "| Species", taxa[x], "\n")
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = NA
))
} else{
cat(green("\u2713"), "| Sequences found for", gene, "| Species", taxa[x], "\n")
res_seqs <-
entrez_fetch(db = "nuccore",
id = res_rearch$ids,
rettype = "fasta")
return(list(
taxa = taxa[x],
gene = gene,
data = F,
sequences = res_seqs
))
}
}, error=function(e){})})
invisible(
lapply(seq_along(taxa), function(x) {
if(!is.na(ret_seqs[[x]]$sequences)){
write(
ret_seqs[[x]]$sequences,
paste0('0.Sequences/',gene,".fasta"),
sep = "\n",
append = TRUE
)
}
})
)
}
sq.retrieve(
clades = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes = c("ADORA3", "COI", "CYTB")
)
remove.packages("phruta")
library(phruta)
sq.retrieve(
clades = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes = c("ADORA3", "COI", "CYTB")
)
sq.retrieve(
clades = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes = c("ADORA3", "COI", "CYTB")
)
setwd("~/MEGA/Packages/Macbook2/phruta")
roxygen2::roxygenise()
remove.packages("phruta")
remove.packages("phruta")
roxygen2::roxygenise()
roxygen2::roxygenise()
library(phruta)
setwd("~/Desktop/test")
sq.retrieve(
clades = c('Felis', 'Vulpes', 'Phoca'),
species = 'Manis_pentadactyla' ,
genes = c("ADORA3", "COI", "CYTB")
)
setwd("~/MEGA/Packages/Macbook2/phruta")
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
library(phruta)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_vignettes()
install.packages("devtools")
devtools::build_vignettes()
devtools::build_vignettes()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
library(testthat)
pkgdown:::build_site_external()
remotes::install_github("ropenscilabs/travis")
library(travis)
use_travis_deploy()
library(travis)
?travis
use_travis_deploy()
usethis::use_travis()
usethis::use_travis()
use_github_actions()
usethis::use_github_action()
usethis::use_github_actions()
usethis::use_github_actions()
travis_enable()
usethis::edit_r_environ()
Sys.getenv("GITHUB_PAT")
usethis::use_travis()
usethis::use_travis()
use_coverage()
usethis::use_coverage()
library(phruta)
library(rmarkdown)
library(markdown)
library(phruta)
codecov(token = "2c54109c-afca-402e-8201-81ffddd61edc")
library(covr)
codecov(token = "2c54109c-afca-402e-8201-81ffddd61edc")
install.packages("badger")
r badge_devel("guangchuangyu/ggtree", "blue")
library(badger)
badge_bioc_release("ggtree", "green")
badge_lifecycle("maturing", "blue")
r badge_travis("cromanpa94/phruta")
badge_travis("cromanpa94/phruta")
badge_code_size("cromanpa94/phruta")
library(phruta)
library(phruta)
library(phruta)
badge_dependencies("badger")
badge_github_actions("cromanpa94/phruta")
library(phruta)
